#
# setup.in:
#       this is included from all makefiles in the subdirectories
#       (via the NMAKE !INCLUDE directive) to set up variables
#       common to all makefiles, such as compiler options and
#       directory specifications.
#
#       Notes:
#
#       --  This include file is for _makefile_ options only.
#           There is another generic include file (include\setup.h),
#           which is for generic _code_ includes (thru C #include).
#
#       --  All environment variables are modified in here ONLY
#           if they haven't been set externally. So, instead of
#           modifying this file, put these values into, e.g.,
#           CONFIG.SYS.
#
#           As a result, there is NORMALLY NO NEED to modify this
#           file. Set external variables instead. See readme.txt
#           and PROGREF.INF for a detailed listing.
#
#       After including this file, the makefiles can use the following
#       macros, which will all be properly set for debug or non-debug mode
#       and with the include directories set properly:
#
#       $(CC_DLL_MT)    compile DLL code (multi-threaded)
#       $(CC_EXE_MT)    compile EXE code (multi-threaded)
#       $(CC_EXE_ST)    compile EXE code (single-threaded)
#       $(CC_WIDGET_DLL) compile widget DLL (single-threaded)
#
#       $(LINK)      call linker (ILINK.EXE per default)
#
#       $(RC)        call resource compiler

!ifndef CVS_WORK_ROOT
!error in setup.in: You must set CVS_WORK_ROOT to the root of your CVS tree. See PROGREF.INF for details.
!endif

!ifndef TKPATH
!error in setup.in: Set TKPATH to your toolkit path first.
!endif

# PROJECT_BASE_DIR is used by "setup.in"
# to identify the root of the source
# tree. This is passed to the sub-makefiles.
# !ifndef PROJECT_BASE_DIR
PROJECT_BASE_DIR = $(CVS_WORK_ROOT)\ext2os2
# !endif

!ifndef EXT2_OUTPUT_ROOT
EXT2_OUTPUT_ROOT = $(PROJECT_BASE_DIR)\bin
!endif

PROJECT_OUTPUT_DIR = $(EXT2_OUTPUT_ROOT)

MWDD32_VERSION  = \"1.70\"
EXT2OS2_VERSION = \"2.40\"

# if COPY_TO is defined (either here or externally),
# the modules are copied to that directory for installation.
# Use a FAT partition. ;-)
!ifndef COPY_TO
COPY_TO = E:\os2
!endif

# PRECOMPILED HEADERS
# -------------------

# The following is the directory for precompiled header files.
# This is a feature of VAC++ 3.0 to speed up compilation.
#
# If the PRECH variable is defined (which should point to a
# valid directory), precompiled headers will automatically be
# enabled for all compilations. This dramatically speeds up
# repetitive compilations (up to three times, especially with
# the extremely complex SOM header files).
#
# If the PRECH variable is not defined, precompiled header files
# will not be used. Uncomment the below statement if you have
# trouble. This will work fine, but slower.
#
# I strongly recommend using a RAM disk for this. This makes sure
# that the prech's won't use space on your disks forever.
# I use RAMFS.IFS for the RAM disk, which is much more reliable
# than OS/2's VDISK.SYS.
# I have TEMP set to "R:\temp", which I create at each bootup
# from CONFIG.SYS. VAC++ and the SOM compiler crash when specifying
# a root directory (e.g. "R:\") as a temp/prech directory.
#
# Note that we create a _separate_ precompiled header file for each
# source file (in the $(PRECH) directory). This eats up a lot
# of space (I have about 30 MBs after a complete XWorkplace build!!),
# but makes sure that the precompiled header does not get recreated
# for each source file, which is a lot faster.
#
# So be warned: if you have TEMP on a RAM disk, this better be
# able to hold more than 30 MBs. If you're using a RAM disk, you
# should have 128 MBs of RAM on your system, or otherwise you'll
# only hear the swap file rattle.
#
# Here are compile times for "nmake -a compile" on the main makefile
# (PII-400, 128 MB RAM, using RAMFS.IFS, code of 99-10-22):
# -- without PRECH:     2:01 minutes
# -- with PRECH:        1:08 minutes
#
# Decide for yourself. ;-)

PRECH = $(TEMP)


# INCLUDES
# --------

# Extend the include path for the compiler.
# This is only used from the subdirectories of SRC and TOOLS,
# so the relative paths are relative to the respective
# subdirectories (e.g. src\main, tools\strrpl).
# We must include include\classes\ also because otherwise the
# headers generated by the SOM compiler won't work.
#
# This does not modify INCLUDE, but defines a new variable,
# which is passed to the compiler with the "CC" macros below.
#
# No need to change this. Change the variables above instead.
#

PROJECT_INCLUDE = $(TKPATH)\h;$(PROJECT_BASE_DIR)\include;$(DDKPATH)\h

DEP_INCLUDE = -i $(PROJECT_INCLUDE)

AINCLUDES  = -Fdi:$(DDKPATH)\inc -Fdi:$(PROJECT_BASE_DIR)\include\os2

# SHARED DEFINES
# --------------

# These are the shared defines MW chose to use in the root
# makefile.ext2-os2 in the original sources. Note that we
# do not include them here in the compiler options, but
# only set the variable, but each makefile must still set
# them in the compiler command line then.

USE_DYNAMIC =
# USE_DYNAMIC = -DDYNAMIC_DEVHELP

SHARED_A_DEFINES = -D:OS2 -D:FSD32
SHARED_C_DEFINES = -DOS2 -DFSD32 -D__KERNEL__ $(USE_DYNAMIC) -DFS_STRICT_CHECKING -DUSE_VDH_HELP -DFS_FILE_SANITY_CHECKS -DEXT2OS2_VER=$(EXT2OS2_VERSION) -DEXT2_DYNAMIC_REV

# ASSEMBLER OPTIONS
# -----------------

AS = alp -Mb -Li


# COMPILER OPTIONS
# ----------------

# Compiler macro. This is used for each .OBJ file to be created.
# If the EXT2_DEBUG environment variable was set to anything, we
# will use debugging compiler options.
# EXT2_DEBUG is set by MAKE.CMD or above.
#
# No need to change this. Change the variables above instead.

# CC_WARNINGS  = /w3 /Wcmp+ /Wcnd- /Wcns+ /Wcnv+ /Wgen /Wcns /Wcpy /Wobs /Word- /Wpro /Wrea /Wret /Wtru
CC_WARNINGS  = /w3 /Wcmp+ /Wcnd- /Wcns+ /Wcnv+ /Wgen /Wcns /Wcpy /Wobs /Word- /Wpro /Wrea /Wret /Wtru
# /Wuse+ /Wuni+

# note: each makefile uses its own defines, because MW chose to have
# different ones for each directory...

# compiler options which are the same with debug and release code
CC_SHARED    = icc $(DEFINES) /I$(PROJECT_INCLUDE) /c /gd- /gi+ /q+ /se /ss /g5

!ifdef EXT2_DEBUG
# debug code
CC_TEMP      = $(CC_SHARED) /o- /oi- /ol- /ti+ /D__DEBUG__=1
# /tm+
!else
# release code
CC_TEMP      = $(CC_SHARED) /o- /oi- /ol- /tn+
# V0.9.7 (2000-12-10) [umoeller]: added /tn+, or we won't get line numbers
# in the map files for the release version...
!endif

#
# CC_RING0 = $(CC_TEMP) -Ge- -Gs- -Gr+ -Rn $(CC_WARNINGS) /D__KERNEL__ /DMWDD32 /DFSD32
CC_RING0 = $(CC_TEMP) -Ge- -Gs- -Gr+ -Rn $(CC_WARNINGS)
CC_RING3 = $(CC_TEMP) -Ge- -Gs- -Gr- -Rn $(CC_WARNINGS)

# Some VisualAge C++ compiler options explained [default in brackets]:
# /c:   compile only, no link (we'll call the linker explicitly)
# /fi+: precompile header files                         [/fe-]
# /g3|4|5: optimize for 386/486/Pentium                 [/g3]
# /gd-: link runtime statically                         [/gd-]
# /ge-: create DLL code                                 [/ge+]
#           This switches between EXE and DLL initialization code
#           for the .OBJ file. /ge+ is only needed when the object
#           file contains a main() function. For libraries to be
#           used either with EXE's or DLL's, use /ge+.
# /gh+: generate profiling hooks for VAC profiler
# /gi+: fast integer execution
# /Gl+: remove unreferenced functions (when comp.+link in 1 step)
# /gm+: multithread libraries
# /gm+: disable stack probes (single-thread only!)
# /gr+: generate code for ring 0
# /kc+: produce preprocessor warnings
# /o+:  optimization (inlining etc.)
# /oi-: no inlining (?)
# /ol+: use intermediate linker; do _not_ use with debug code
# /q+:  suppress icc logo
# /Re : don't use subsystem libraries (!= Rn)
# /se:  all language extensions
# /si+: allow use of precompiled header files
# /ss:  allow double slashes comments in C too
# /ti+: debug code
# /tdp: compile everything as C++, even if it has a .C suffix
# /tm:  use debug memory management (malloc etc.)
# /tn:  add source line numbers to object files (for mapfile); a subset of /ti+
# /Wcls: class problems
# /Wcnd: conditional exprs problems (= / == etc.)
# /Wcmp: possible unsigned comparison redundancies
# /Wcns: operations involving constants
# /Wcnv: conversions
# /Wcpy: copy constructor problems
# /Weff: statements with no effect (annoying)
# /Wgen: generic debugging msgs
# /Wobs: obsolete features
# /Word: unspecified evaluation order
# /Wpar: list non-referenced parameters (annoying)
# /Wppc: list possible preprocessor problems (.h dependencies)
# /Wpro: warn if funcs have not been prototyped
# /Wrea: mark code that cannot be reached
# /Wret: check consistency of return levels
# /Wuni: uninitialized variables
# /Wuse: unused variables
# /w2:   produce error and warning messages, but no infos


# LINK OPTIONS
# ------------
#
# Link macro. This is used for final linking.
# If we're supposed to do the release version, we'll turn
# off debugging and optimize and pack the resulting files.
#
# No need to change this. Change the variables above instead.

LINK_BASE = ilink /nologo /map:$(MODULESDIR)\$(@B).map /linenumbers

!ifdef EXT2_DEBUG
LINK =  $(LINK_BASE) /debug
!else
LINK =  $(LINK_BASE)
!endif

# Some LINK386 cmd line options
# (Visual Age ILINK understands these too if /nofree is specified):
# /align:  executable pages align factor (in bytes)
# /noe:    no extended dictionary. Required for replacing _DLL_InitTerm,
#          which we're doing in SRC\MAIN\MODULE.C.
# /noi:    no ignore case (necc. for C)
# /map:    list public symbols (create MAP file); we always need this,
#          because we produce a .SYM file later.
# /linenumbers: include linenumbers in MAP file
# /nod:    no default library search (explicitly specify libs)
# /nol:    no logo (link386 startup)
# /packcode: group neighboring code segments (enabled per default)
# /packdata: group neighboring data segments (disabled per default)
# /debug:  include debug code
# /optfunc: optimize code arrangement (takes some extra time)
# /exepack:2 use Warp 3 executable compression


# RESOURCE COMPILER
# -----------------

RC      = rc -p -x2 -n -i $(PROJECT_BASE_DIR)\include

# RC options:
# -p       pack (64K boundaries)
# -x2      Warp 3 compression
# -n       no logo

# LIBRARY MANAGER
# ---------------

ILIB = LIBV2R1.EXE

# COPY COMMAND
# ------------

COPY = cmd.exe /c copy


